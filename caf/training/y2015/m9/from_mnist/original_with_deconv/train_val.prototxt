#### layer 0 ####
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00392156862745
  }
  data_param {
    source: "caffe/data/mnist/mnist_train_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00392156862745
  }
  data_param {
    source: "caffe/data/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  type: 'Python'
  name: 'pydata'
  bottom: 'data'
  top: 'pydata'
  python_param {
    module: 'kz_layers0'
    layer: 'SimpleLayer2'
  }
  include {
    phase: TRAIN
  }
}
layer {
  type: 'Python'
  name: 'pydata'
  bottom: 'data'
  top: 'pydata'
  python_param {
    module: 'kz_layers0'
    layer: 'SimpleLayer2'
  }
  include {
    phase: TEST
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pydata"
  top: "conv1"
  convolution_param {
    num_output: 20
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  convolution_param {
    num_output: 50
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "deconv1"
  type: "Deconvolution"
  bottom: "pool2"
  top: "deconv1"
  convolution_param {
    num_output: 50
    kernel_size: 7
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "deconv2"
  type: "Deconvolution"
  bottom: "deconv1"
  top: "deconv2"
  convolution_param {
    num_output: 20
    kernel_size: 7
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "deconv3"
  type: "Deconvolution"
  bottom: "deconv2"
  top: "deconv3"
  convolution_param {
    num_output: 8
    kernel_size: 7
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "deconv4"
  type: "Deconvolution"
  bottom: "deconv3"
  top: "deconv4"
  convolution_param {
    num_output: 1
    kernel_size: 7
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "pydata_deconv4"
  type: "Concat"
  bottom: "pydata"
  bottom: "deconv4"
  top: "pydata_deconv4"
}
layer {
  name: "conv1b"
  type: "Convolution"
  bottom: "pydata_deconv4"
  top: "conv1b"
  convolution_param {
    num_output: 20
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "pool1b"
  type: "Pooling"
  bottom: "conv1b"
  top: "pool1b"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2b"
  type: "Convolution"
  bottom: "pool1b"
  top: "conv2b"
  convolution_param {
    num_output: 50
    kernel_size: 5
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "pool2b"
  type: "Pooling"
  bottom: "conv2b"
  top: "pool2b"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2b"
  top: "ip1"
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
#layer {
#  name: "identity"
#  type: "EuclideanLoss"
#  bottom: "deconv1"
#  bottom: "data"
#  top: "identity"
#  loss_weight: 1
#}