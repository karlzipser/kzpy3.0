######################
#('ddata', (1, 9, 112, 150))
#('ddata2', (1, 3))
#('py_image_data', (1, 9, 112, 150))
#('py_target_data', (1, 3))
#('conv1', (1, 96, 34, 47))
#('pool1', (1, 96, 17, 23))
#('conv2', (1, 256, 13, 19))
#('pool2', (1, 256, 6, 9))
#('ip1', (1, 512))
#('ip2', (1, 3))
#('identity', ())
#('conv1', (96, 9, 11, 11))
#('conv2', (256, 48, 5, 5))
#('ip1', (512, 13824))
#('ip2', (3, 512))
######################



#####################
# Dummy data to make place for images
layer {
  name: "M_ddata"
  type: "DummyData"
  top: "M_ddata"

  dummy_data_param {
    shape {
      dim: 1
      dim: 9
      dim: 112
      dim: 150
    }
  }
}
# Dummy data to make place for multiple target values
layer {
  name: "MC_ddata2"
  type: "DummyData"
  top: "MC_ddata2"
  dummy_data_param {
    shape {
      dim: 1
      dim: 9
    }
  }
}
#####################
# Image data
layer {
  type: 'Python'
  name: 'M_py_image_data'
  bottom: 'M_ddata'
  top: 'M_py_image_data'
  python_param {
    module: 'kz_layers3'
    layer: 'SimpleLayer4'
  }
}

# Target values
layer {
  type: 'Python'
  name: 'MC_py_target_data'
  bottom: 'MC_ddata2'
  top: 'MC_py_target_data'
  python_param {
    module: 'kz_layers3'
    layer: 'SimpleLayer5'
  }
}
#####################
# Hidden layers
layer {
  name: "M_conv1"
  type: "Convolution"
  bottom: "M_py_image_data"
  top: "M_conv1"
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 3
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "M_relu1"
  type: "ReLU"
  bottom: "M_conv1"
  top: "M_conv1"
}
layer { # (1, 96, 17, 23)
  name: "M_pool1"
  type: "Pooling"
  bottom: "M_conv1"
  top: "M_pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
#####################
#####################
#####################
#####################
#####################
#####################
#####################
#####################
#####################
#####################
#####################
#####################


############################
#('ddata', (1, 3, 225, 300))
#('ddata2', (1, 3))
#('py_image_data', (1, 3, 225, 300))
#('py_target_data', (1, 3))
#('conv1', (1, 96, 72, 97))
#('pool1', (1, 96, 36, 48))
#('conv2', (1, 256, 34, 46))
#('pool2', (1, 256, 17, 23))
#('conv3', (1, 384, 15, 21))
#('pool3', (1, 384, 7, 10))
#('ip1', (1, 512))
#('ip2', (1, 3))
#('identity', ())
#('conv1', (96, 3, 11, 11))
#('conv2', (256, 48, 5, 5))
#('conv3', (384, 256, 3, 3))
#('ip1', (512, 26880))
#('ip2', (3, 512))
############################



#####################
# Dummy data to make place for images
layer {
  name: "C_ddata"
  type: "DummyData"
  top: "C_ddata"

  dummy_data_param {
    shape {
      dim: 1
      dim: 3
      dim: 225
      dim: 300
    }
  }
}
#####################
# Image data
layer {
  type: 'Python'
  name: 'C_py_image_data'
  bottom: 'C_ddata'
  top: 'C_py_image_data'
  python_param {
    module: 'kz_layers3'
    layer: 'SimpleLayer4'
  }
}
#####################
# Hidden layers
layer {
  name: "C_conv1"
  type: "Convolution"
  bottom: "C_py_image_data"
  top: "C_conv1"
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 3
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "C_relu1"
  type: "ReLU"
  bottom: "C_conv1"
  top: "C_conv1"
}
layer {
  name: "C_pool1"
  type: "Pooling"
  bottom: "C_conv1"
  top: "C_pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}



layer {
  name: "C_conv2"
  type: "Convolution"
  bottom: "C_pool1"
  top: "C_conv2"
  convolution_param {
    num_output: 256
    kernel_size: 5
    group: 2
    pad: 1 #### for alignment with motion network
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "C_relu2"
  type: "ReLU"
  bottom: "C_conv2"
  top: "C_conv2"
}
layer {
  name: "C_pool2"
  type: "Pooling"
  bottom: "C_conv2"
  top: "C_pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

#####################

layer {
  name: "MC_conv3"
  type: "Convolution"
  bottom: "M_pool1"
  #bottom: "C_pool2"
  top: "MC_conv3"
  convolution_param {
    num_output: 384
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "MC_relu3"
  type: "ReLU"
  bottom: "MC_conv3"
  top: "MC_conv3"
}
layer {
  name: "MC_pool3"
  type: "Pooling"
  bottom: "MC_conv3"
  top: "MC_pool3"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}




layer {
  name: "MC_ip1"
  type: "InnerProduct"
  bottom: "MC_pool3"
  top: "MC_ip1"
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "MC_relu3"
  type: "ReLU"
  bottom: "MC_ip1"
  top: "MC_ip1"
}

layer {
  name: "MC_ip2"
  type: "InnerProduct"
  bottom: "MC_ip1"
  top: "MC_ip2"
  inner_product_param {
    num_output: 9
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "MC_relu4"
  type: "ReLU"
  bottom: "MC_ip2"
  top: "MC_ip2"
}

#####################

#####################
# output layer
layer {
  name: "identity"
  type: "EuclideanLoss"
  bottom: "MC_ip2"
  bottom: "MC_py_target_data"
  top: "identity"
  loss_weight: 1
}

#####################
# output layer
#layer {
#  name: "MC_loss"
#  type: "SoftmaxWithLoss"
#  bottom: "MC_ip2"
#  bottom: "MC_py_target_data"
#  top: "MC_loss"
#}
