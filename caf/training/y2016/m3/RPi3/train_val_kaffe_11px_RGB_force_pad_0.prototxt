name: "C_RPi"
input: "C_ddata"
input_dim: 1
input_dim: 3
input_dim: 225
input_dim: 300
force_backward: true
#####################
# Dummy data to make place for images
#layer {
#  name: "C_ddata"
#  type: "DummyData"
#  top: "C_ddata"
#  dummy_data_param {
#    shape {
#      dim: 1
#      dim: 3
#      dim: 225
#      dim: 300
#    }
#  }
#}
# Dummy data to make place for multiple target values
layer {
  name: "C_ddata2"
  type: "DummyData"
  top: "C_ddata2"
  dummy_data_param {
    shape {
      dim: 1
      dim: 7
    }
  }
}
#####################

#####################
# Image data
layer {
  type: 'Python'
  name: 'C_py_image_data'
  bottom: 'C_ddata'
  top: 'C_py_image_data'
  
  python_param {
    module: 'kz_layers0'
    layer: 'SimpleLayer0'
    #force_backward: true
  }
}

# Target values
layer {
  type: 'Python'
  name: 'C_py_target_data'
  bottom: 'C_ddata2'
  top: 'C_py_target_data'
  python_param {
    module: 'kz_layers0'
    layer: 'SimpleLayer0'
  }
}
#####################



#####################
# Hidden layers
layer {
  name: "C_conv1"
  type: "Convolution"
  bottom: "C_py_image_data"
  top: "C_conv1"
  convolution_param {
    num_output: 96
    kernel_size: 11
    pad: 11
    stride: 3
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "C_relu1"
  type: "ReLU"
  bottom: "C_conv1"
  top: "C_conv1"
}
layer {
  name: "C_pool1"
  type: "Pooling"
  bottom: "C_conv1"
  top: "C_pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

layer {
  name: "C_conv2"
  type: "Convolution"
  bottom: "C_pool1"
  top: "C_conv2"
  convolution_param {
    num_output: 256
    kernel_size: 5
    pad: 5
    group: 2
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "C_relu2"
  type: "ReLU"
  bottom: "C_conv2"
  top: "C_conv2"
}
layer {
  name: "C_pool2"
  type: "Pooling"
  bottom: "C_conv2"
  top: "C_pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}



layer {
  name: "C_conv3"
  type: "Convolution"
  bottom: "C_pool2"
  top: "C_conv3"
  convolution_param {
    num_output: 384
    kernel_size: 3
    pad: 3
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "C_relu3"
  type: "ReLU"
  bottom: "C_conv3"
  top: "C_conv3"
}
layer {
  name: "C_pool3"
  type: "Pooling"
  bottom: "C_conv3"
  top: "C_pool3"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}






layer {
  name: "C_ip1"
  type: "InnerProduct"
  bottom: "C_pool3"
  top: "C_ip1"
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "C_relu3"
  type: "ReLU"
  bottom: "C_ip1"
  top: "C_ip1"
}

layer {
  name: "C_ip2"
  type: "InnerProduct"
  bottom: "C_ip1"
  top: "C_ip2"
  inner_product_param {
    num_output: 7
    weight_filler {
      type: "xavier"
    }
  }
}
layer {
  name: "C_relu4"
  type: "ReLU"
  bottom: "C_ip2"
  top: "C_ip2"
}

#####################



#####################
# output layer
layer {
  name: "identity"
  type: "EuclideanLoss"
  bottom: "C_ip2"
  bottom: "C_py_target_data"
  top: "identity"
  loss_weight: 1
}
