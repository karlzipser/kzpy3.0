#  ideas
# 1) deconv as feedback to predict future
# 2) weighted memory using nin to thin out past features
# 3) route layer output to thalmus for action command and route the back to cortex
# 4) two passes: feed-forward and second pass including deconv 'feedback' signals.
#    For this, use weight sharing but only train some weights on feed-forward pass.
# Need way to quantify success of models, so that I can test effectiveness of these
# various variations.
# idea: train net to predict time offset between frames or time/stereo quad inputs.

layer {
	name: "steer_motor_target_data"
	type: "DummyData"
	top: "steer_motor_target_data"
	dummy_data_param {
		shape {
			dim: 1
			dim: 20
		}
	}
}






layer {
	name: "ZED_data_pool2"
	type: "DummyData"
	top: "ZED_data_pool2"
	dummy_data_param {
		shape {
			dim: 1
			dim: 4
			dim: 168
			dim: 168
		}
	}
}


	
###################### Convolutional Layer Set 'conv1' ######################
#
layer {
	name: "conv1"
	type: "Convolution"
	bottom: "ZED_data_pool2"
	top: "conv1"
	convolution_param {
		num_output: 96
		group: 1
		kernel_size: 11
		stride: 3
		pad: 1
		weight_filler {
			type: "gaussian" 
			std: 0.1
		}
	}
}
	
layer {
	name: "conv1_relu"
	type: "ReLU"
	bottom: "conv1"
	top: "conv1"
}
	
layer {
	name: "conv1_pool"
	type: "Pooling"
	bottom: "conv1"
	top: "conv1_pool"
	pooling_param {
		pool: MAX
		kernel_size: 3
		stride: 2
		pad: 0
	}
}
	
############################################################



###################### Convolutional Layer Set 'conv2' ######################
#
layer {
	name: "conv2"
	type: "Convolution"
	bottom: "conv1_pool"
	top: "conv2"
	convolution_param {
		num_output: 256
		group: 2
		kernel_size: 3
		stride: 2
		pad: 0
		weight_filler {
			type: "gaussian" 
			std: 0.1
		}
	}
}
	
layer {
	name: "conv2_relu"
	type: "ReLU"
	bottom: "conv2"
	top: "conv2"
}

layer {
	name: "conv2_pool"
	type: "Pooling"
	bottom: "conv2"
	top: "conv2_pool"
	pooling_param {
		pool: MAX
		kernel_size: 3
		stride: 2
		pad: 0
	}
}
	
############################################################

###################### IP Layer Set 'ip__conv2_pool' ######################
#
#layer {
#	name: "ip__conv2_pool"
#	type: "InnerProduct"
#	bottom: "conv2_pool"
#	top: "ip__conv2_pool"
#	inner_product_param {
#		num_output: 512
#		weight_filler {
#			type: "xavier" 
#		}
#	}
#}
layer {
	name: "th1"
	type: "Convolution"
	bottom: "conv2_pool"
	top: "th1"
	convolution_param {
		num_output: 256
		group: 2
		kernel_size: 3
		stride: 1
		pad: 0
		weight_filler {
			type: "gaussian" 
			std: 0.1
		}
	}
}
	
layer {
	name: "th1_relu"
	type: "ReLU"
	bottom: "th1"
	top: "th1"
}

layer {
	name: "th_deconv"
	type: "Deconvolution"
	bottom: "th1"
	top: "th_deconv"
	convolution_param {
		num_output: 96
		group: 1
		kernel_size: 3
		stride: 1
		pad: 0
		weight_filler {
			type: "gaussian" 
			std: 0.01
		}
	}
}

############################################################
layer {
  name: "conv3_input_concat"
  type: "Concat"
  bottom: "conv2_pool"
  bottom: "th_deconv"
  top: "conv3_input_concat"
  concat_param {
    axis: 1
  }
}
layer {
	name: "conv3"
	type: "Convolution"
	bottom: "conv3_input_concat"
	#bottom: "th_deconv"
	top: "conv3"
	convolution_param {
		num_output: 256
		group: 2
		kernel_size: 3
		stride: 1
		pad: 0
		weight_filler {
			type: "gaussian" 
			std: 0.1
		}
	}
}
	
layer {
	name: "conv3_relu"
	type: "ReLU"
	bottom: "conv3"
	top: "conv3"
}
layer {
	name: "conv3_pool"
	type: "Pooling"
	bottom: "conv3"
	top: "conv3_pool"
	pooling_param {
		pool: MAX
		kernel_size: 3
		stride: 1
		pad: 0
	}
}
layer {
	name: "deconv2"
	type: "Deconvolution"
	bottom: "conv3"
	top: "deconv2"
	convolution_param {
		num_output: 96
		group: 1
		kernel_size: 7
		stride: 2
		pad: 0
		weight_filler {
			type: "gaussian" 
			std: 0.01
		}
	}
}

layer {
	name: "deconv1"
	type: "Deconvolution"
	bottom: "deconv2"
	top: "deconv1"
	convolution_param {
		num_output: 96
		group: 1
		kernel_size: 10
		stride: 4
		pad: 2
		weight_filler {
			type: "gaussian" 
			std: 0.01
		}
	}
}
layer {
	name: "deconv0"
	type: "Deconvolution"
	bottom: "deconv1"
	top: "deconv0"
	convolution_param {
		num_output: 4
		group: 1
		kernel_size: 9
		stride: 3
		pad: 0
		weight_filler {
			type: "gaussian" 
			std: 0.01
		}
	}
}
############################################
#
layer {
	name: "ip_out_1"
	type: "InnerProduct"
	bottom: "th1"
	top: "ip_out_1"
	inner_product_param {
		num_output: 20
		weight_filler {
			type: "xavier" 
		}
	}
}
	
############################################################

#
layer {
	name: "ip__conv3_pool"
	type: "InnerProduct"
	bottom: "conv3_pool"
	top: "ip__conv3_pool"
	inner_product_param {
		num_output: 512
		weight_filler {
			type: "xavier" 
		}
	}
}
	
layer {
	name: "ip__conv3_pool_relu"
	type: "ReLU"
	bottom: "ip__conv3_pool"
	top: "ip__conv3_pool"
}
	
############################################################


#
layer {
	name: "ip_out_2"
	type: "InnerProduct"
	bottom: "ip__conv3_pool"
	top: "ip_out_2"
	inner_product_param {
		num_output: 20
		weight_filler {
			type: "xavier" 
		}
	}
}

############################################################


	

layer {
  name: "ip_out_1_ip_out_2_concat"
  type: "Concat"
  bottom: "ip_out_1"
  bottom: "ip_out_2"
  top: "ip_out_1_ip_out_2_concat"
  concat_param {
    axis: 1
  }
}


layer {
	name: "ip__1_2_concat"
	type: "InnerProduct"
	bottom: "ip_out_1_ip_out_2_concat"
	top: "ip__1_2_concat"
	inner_product_param {
		num_output: 512
		weight_filler {
			type: "xavier" 
		}
	}
}
layer {
	name: "ip__1_2_concat_relu"
	type: "ReLU"
	bottom: "ip__1_2_concat"
	top: "ip__1_2_concat"
}


layer {
	name: "ip_out_3"
	type: "InnerProduct"
	bottom: "ip__1_2_concat"
	top: "ip_out_3"
	inner_product_param {
		num_output: 20
		weight_filler {
			type: "xavier" 
		}
	}
}


layer {
	name: "euclidean1"
	type: "EuclideanLoss"
	bottom: "ip_out_1"
	bottom: "steer_motor_target_data"
	top: "euclidean1"
	loss_weight: 1
}
	
layer {
	name: "euclidean2"
	type: "EuclideanLoss"
	bottom: "ip_out_2"
	bottom: "steer_motor_target_data"
	top: "euclidean2"
	loss_weight: 1
}

	
layer {
	name: "euclidean3"
	type: "EuclideanLoss"
	bottom: "ip_out_3"
	bottom: "steer_motor_target_data"
	top: "euclidean3"
	loss_weight: 1
}

layer {
	name: "euclidean_deconv"
	type: "EuclideanLoss"
	bottom: "ZED_data_pool2"
	bottom: "deconv0"
	top: "euclidean_deconv"
	loss_weight: 1
}