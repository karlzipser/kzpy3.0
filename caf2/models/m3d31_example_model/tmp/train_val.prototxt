# m3d31_example_model
# 31Mar16_13h37m44s
# Test the ability of my new wrapper system to generate and train models.
# I've been working on getting everything directed from a single file.
# ###############################
# blobs
# ('ddata', (1, 9, 56, 150))
# ('ddata2', (1, 3))
# ('py_image_data', (1, 9, 56, 150))
# ('py_target_data', (1, 3))
# ('conv1', (1, 96, 16, 47))
# ('conv1_pool', (1, 96, 8, 23))
# ('conv2', (1, 256, 2, 7))
# ('conv2_pool', (1, 256, 1, 3))
# ('ip1', (1, 512))
# ('ip2', (1, 3))
# ('euclidian', ())
# ###############################
# params
# ('conv1', (96, 9, 11, 11))
# ('conv2', (256, 48, 5, 5))
# ('ip1', (512, 768))
# ('ip2', (3, 512))
# ###############################
# 
layer {
	name: "ddata"
	type: "DummyData"
	top: "ddata"
	dummy_data_param {
		shape {
			dim: 1
			dim: 9
			dim: 50
			dim: 144
		}
	}
}
	
layer {
	name: "ddata2"
	type: "DummyData"
	top: "ddata2"
	dummy_data_param {
		shape {
			dim: 1
			dim: 3
		}
	}
}
	
layer {
	type: 'Python'
	name: 'py_image_data'
	bottom: 'ddata'
	top: 'py_image_data'
	python_param {
		module: 'caf2_layers'
		layer: 'SimpleLayer4_TRAIN'
	}
	include {
		phase: TRAIN
	}
}
	
layer {
	type: 'Python'
	name: 'py_target_data'
	bottom: 'ddata2'
	top: 'py_target_data'
	python_param {
		module: 'caf2_layers'
		layer: 'SimpleLayer5_TRAIN'
	}
	include {
		phase: TRAIN
	}
}
	
layer {
	type: 'Python'
	name: 'py_image_data'
	bottom: 'ddata'
	top: 'py_image_data'
	python_param {
		module: 'caf2_layers'
		layer: 'SimpleLayer4_TEST'
	}
	include {
		phase: TEST
	}
}
	
layer {
	type: 'Python'
	name: 'py_target_data'
	bottom: 'ddata2'
	top: 'py_target_data'
	python_param {
		module: 'caf2_layers'
		layer: 'SimpleLayer5_TEST'
	}
	include {
		phase: TEST
	}
}
	
###################### Convolutional Layer Set 'conv1' ######################
#
layer {
	name: "conv1"
	type: "Convolution"
	bottom: "py_image_data"
	top: "conv1"
	convolution_param {
		num_output: 96
		group: 1
		kernel_size: 11
		stride: 3
		pad: 0
		weight_filler {
			type: "gaussian" 
			std: 0.1
		}
	}
}
	
layer {
	name: "conv1_relu"
	type: "ReLU"
	bottom: "conv1"
	top: "conv1"
}
	
layer {
	name: "conv1_pool"
	type: "Pooling"
	bottom: "conv1"
	top: "conv1_pool"
	pooling_param {
		pool: MAX
		kernel_size: 3
		stride: 2
		pad: 0
	}
}
	
############################################################


###################### Convolutional Layer Set 'conv2' ######################
#
layer {
	name: "conv2"
	type: "Convolution"
	bottom: "conv1_pool"
	top: "conv2"
	convolution_param {
		num_output: 256
		group: 2
		kernel_size: 3
		stride: 2
		pad: 0
		weight_filler {
			type: "gaussian" 
			std: 0.1
		}
	}
}
	
layer {
	name: "conv2_relu"
	type: "ReLU"
	bottom: "conv2"
	top: "conv2"
}
	
layer {
	name: "conv2_pool"
	type: "Pooling"
	bottom: "conv2"
	top: "conv2_pool"
	pooling_param {
		pool: MAX
		kernel_size: 3
		stride: 2
		pad: 0
	}
}
	
############################################################


###################### IP Layer Set 'ip1' ######################
#
layer {
	name: "ip1"
	type: "InnerProduct"
	bottom: "conv2_pool"
	top: "ip1"
	inner_product_param {
		num_output: 512
		weight_filler {
			type: "xavier" 
		}
	}
}
	
layer {
	name: "ip1_relu"
	type: "ReLU"
	bottom: "ip1"
	top: "ip1"
}
	
############################################################


###################### IP Layer Set 'ip2' ######################
#
layer {
	name: "ip2"
	type: "InnerProduct"
	bottom: "ip1"
	top: "ip2"
	inner_product_param {
		num_output: 3
		weight_filler {
			type: "xavier" 
		}
	}
}
	
layer {
	name: "ip2_relu"
	type: "ReLU"
	bottom: "ip2"
	top: "ip2"
}
	
############################################################


layer {
	name: "euclidian"
	type: "EuclideanLoss"
	bottom: "ip2"
	bottom: "py_target_data"
	top: "euclidian"
	loss_weight: 1
}
	
